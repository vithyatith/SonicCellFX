/*
 * Copyright 2022 Vithya Tith
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.ributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See t
 */
package com.component.io;


import com.sonicmsgr.soniccell.DataType;

import javax.swing.*;
import java.io.*;

public class OutputGui extends javax.swing.JFrame {
    private OutputComponent component;
    private int DATA_TYPE=0;
    private transient JFileChooser fc = new JFileChooser("c:\\");
    private int fileSize=16;
    
    /** Creates new form InputGui */
    public OutputGui() {
        initComponents();
        initGroup();
    }
    public OutputGui(OutputComponent _component) {
        component = _component;
        initComponents();
        initGroup();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        
        buttonGroup1 = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        endianLabel = new javax.swing.JLabel();
        browButton = new javax.swing.JButton();
        fileRB = new javax.swing.JRadioButton();
        socketRB = new javax.swing.JRadioButton();
        dataTypeLabel = new javax.swing.JLabel();
        clientRB = new javax.swing.JRadioButton();
        serverRB = new javax.swing.JRadioButton();
        portLabel = new javax.swing.JLabel();
        portNumTF = new javax.swing.JTextField();
        bigEndianRB = new javax.swing.JRadioButton();
        littleEndianRB = new javax.swing.JRadioButton();
        formatLabel = new javax.swing.JLabel();
        binaryRB = new javax.swing.JRadioButton();
        textRB = new javax.swing.JRadioButton();
        dataTypeCB = new javax.swing.JComboBox();
        fileTF = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        saveCloseButton = new javax.swing.JButton();
        protocolLabel = new javax.swing.JLabel();
        tcpRB = new javax.swing.JRadioButton();
        udpRB = new javax.swing.JRadioButton();
        delmiterLabel = new javax.swing.JLabel();
        otherTF = new javax.swing.JTextField();
        ipLabel = new javax.swing.JLabel();
        ipTF = new javax.swing.JTextField();
        tabRB = new javax.swing.JRadioButton();
        spaceRB = new javax.swing.JRadioButton();
        semiRB = new javax.swing.JRadioButton();
        commaRB = new javax.swing.JRadioButton();
        otherRB = new javax.swing.JRadioButton();
        syncRB = new javax.swing.JRadioButton();
        unsyncRB = new javax.swing.JRadioButton();
        unlimitedRB = new javax.swing.JRadioButton();
        limitedRB = new javax.swing.JRadioButton();
        limitedTF = new javax.swing.JTextField();
        
        mainPanel.setLayout(new java.awt.GridBagLayout());
        
        endianLabel.setText("Endian");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        mainPanel.add(endianLabel, gridBagConstraints);
        
        browButton.setText("Brows");
        browButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        mainPanel.add(browButton, gridBagConstraints);
        
        fileRB.setText("File");
        fileRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        fileRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        fileRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        mainPanel.add(fileRB, gridBagConstraints);
        
        socketRB.setText("Socket");
        socketRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        socketRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        socketRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socketRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 0);
        mainPanel.add(socketRB, gridBagConstraints);
        
        dataTypeLabel.setText("DataType");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        mainPanel.add(dataTypeLabel, gridBagConstraints);
        
        clientRB.setText("Client");
        clientRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        clientRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clientRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        mainPanel.add(clientRB, gridBagConstraints);
        
        serverRB.setText("Server");
        serverRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        serverRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        serverRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 0, 0);
        mainPanel.add(serverRB, gridBagConstraints);
        
        portLabel.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        mainPanel.add(portLabel, gridBagConstraints);
        
        portNumTF.setText("2020");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        mainPanel.add(portNumTF, gridBagConstraints);
        
        bigEndianRB.setText("Big Endian");
        bigEndianRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bigEndianRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        bigEndianRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bigEndianRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(bigEndianRB, gridBagConstraints);
        
        littleEndianRB.setText("Little Endian");
        littleEndianRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        littleEndianRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        littleEndianRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                littleEndianRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 20, 0, 0);
        mainPanel.add(littleEndianRB, gridBagConstraints);
        
        formatLabel.setText("Format");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        mainPanel.add(formatLabel, gridBagConstraints);
        
        binaryRB.setText("Binary");
        binaryRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        binaryRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        binaryRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mainPanel.add(binaryRB, gridBagConstraints);
        
        textRB.setText("Text");
        textRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        textRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        textRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mainPanel.add(textRB, gridBagConstraints);
        
        dataTypeCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Byte", "Short", "Int", "Long", "Float", "Double", "String", "Object" }));
        dataTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataTypeCBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mainPanel.add(dataTypeCB, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mainPanel.add(fileTF, gridBagConstraints);
        
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        mainPanel.add(updateButton, gridBagConstraints);
        
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        mainPanel.add(cancelButton, gridBagConstraints);
        
        saveCloseButton.setText("Save/Close");
        saveCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCloseButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 5);
        mainPanel.add(saveCloseButton, gridBagConstraints);
        
        protocolLabel.setText("Protocol:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 16, 0, 0);
        mainPanel.add(protocolLabel, gridBagConstraints);
        
        tcpRB.setText("TCP");
        tcpRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        tcpRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        tcpRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        mainPanel.add(tcpRB, gridBagConstraints);
        
        udpRB.setText("UDP");
        udpRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        udpRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        udpRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udpRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        mainPanel.add(udpRB, gridBagConstraints);
        
        delmiterLabel.setText("Delimiter:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        mainPanel.add(delmiterLabel, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mainPanel.add(otherTF, gridBagConstraints);
        
        ipLabel.setText("IP Address:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        mainPanel.add(ipLabel, gridBagConstraints);
        
        ipTF.setText("127.0.0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(ipTF, gridBagConstraints);
        
        tabRB.setText("Tab");
        tabRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        tabRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        tabRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 11, 0, 0);
        mainPanel.add(tabRB, gridBagConstraints);
        
        spaceRB.setText("Space");
        spaceRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        spaceRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        spaceRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spaceRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        mainPanel.add(spaceRB, gridBagConstraints);
        
        semiRB.setText("Semicolon");
        semiRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        semiRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        semiRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semiRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        mainPanel.add(semiRB, gridBagConstraints);
        
        commaRB.setText("Comma");
        commaRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        commaRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        commaRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commaRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(commaRB, gridBagConstraints);
        
        otherRB.setText("Other:");
        otherRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        otherRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(otherRB, gridBagConstraints);
        
        syncRB.setText("Sync(Slow)");
        syncRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        syncRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 0, 0);
        mainPanel.add(syncRB, gridBagConstraints);
        
        unsyncRB.setText("Unsync(fast)");
        unsyncRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unsyncRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 16, 0, 0);
        mainPanel.add(unsyncRB, gridBagConstraints);
        
        unlimitedRB.setText("Unlimited Size");
        unlimitedRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unlimitedRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        unlimitedRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlimitedRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        mainPanel.add(unlimitedRB, gridBagConstraints);
        
        limitedRB.setText("Limited Size(MB):");
        limitedRB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        limitedRB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        limitedRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitedRBActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        mainPanel.add(limitedRB, gridBagConstraints);
        
        limitedTF.setText("16");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mainPanel.add(limitedTF, gridBagConstraints);
        
        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);
        
        pack();
    }// </editor-fold>
    
    private void unlimitedRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        limitedTF.setEnabled(false);
    }
    
    private void limitedRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        limitedTF.setEnabled(true);
    }
    
    private void otherRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    private void commaRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    private void semiRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    private void spaceRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    private void tabRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    private void initGroup(){
        syncRB.setEnabled(false);
        unsyncRB.setEnabled(false);
        
        limitedTF.setEnabled(false);
        
        fileLimitedSizeGroup = new ButtonGroup();
        fileLimitedSizeGroup.add(limitedRB);
        fileLimitedSizeGroup.add(unlimitedRB);
        unlimitedRB.setSelected(true);
        
        dataTypeCB.setSelectedItem("Float");
        
        fileSyncButtonGroup = new ButtonGroup();
        inputButtonGroup = new ButtonGroup();
        protocolButtonGroup = new ButtonGroup();;
        serverClientButtonGroup = new ButtonGroup();;
        formatButtonGroup = new ButtonGroup();;
        endianButtonGroup = new ButtonGroup();;
        
        
        fileSyncButtonGroup.add(syncRB);
        fileSyncButtonGroup.add(unsyncRB);
        syncRB.setSelected(true);
        
        spaceRB.setSelected(true);
        delimiterButtonGroup= new ButtonGroup();
        delimiterButtonGroup.add(tabRB);
        delimiterButtonGroup.add(commaRB);
        delimiterButtonGroup.add(spaceRB);
        delimiterButtonGroup.add(semiRB);
        delimiterButtonGroup.add(otherRB);
        
        fileRB.setSelected(true);
        inputButtonGroup.add(fileRB);
        inputButtonGroup.add(socketRB);
        
        
        tcpRB.setSelected(true);
        protocolButtonGroup.add(tcpRB);
        protocolButtonGroup.add(udpRB);
        tcpRB.setEnabled(false);
        udpRB.setEnabled(false);
        
        serverRB.setSelected(true);
        serverClientButtonGroup.add(serverRB);
        serverClientButtonGroup.add(clientRB);
        serverRB.setEnabled(false);
        clientRB.setEnabled(false);
        
        portNumTF.setEnabled(false);
        ipTF.setEnabled(false);
        ipLabel.setEnabled(false);
        binaryRB.setSelected(true);
        formatButtonGroup.add(binaryRB);
        formatButtonGroup.add(textRB);
        
        littleEndianRB.setSelected(true);
        endianButtonGroup.add(littleEndianRB);
        endianButtonGroup.add(bigEndianRB);
        binaryRBActionPerformed(null);
        
    }
    private void browButtonActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            filename = file.getAbsolutePath();
            fileTF.setText(filename);
        } else {
            
        }
    }
    
    private void bigEndianRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    private void littleEndianRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    private void textRBActionPerformed(java.awt.event.ActionEvent evt) {
        syncRB.setEnabled(true);
        unsyncRB.setEnabled(true);
        
        commaRB.setEnabled(true);
        spaceRB.setEnabled(true);
        
        semiRB.setEnabled(true);
        
        tabRB.setEnabled(true);
        otherRB.setEnabled(true);
        otherTF.setEnabled(true);
        
        
        dataTypeCB.setEnabled(false);
        
        
        bigEndianRB.setEnabled(false);
        littleEndianRB.setEnabled(false);
        endianLabel.setEnabled(false);

        //asdf
        
    }
    
    private void binaryRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        syncRB.setEnabled(false);
        unsyncRB.setEnabled(false);
        commaRB.setEnabled(false);
        spaceRB.setEnabled(false);
        
        semiRB.setEnabled(false);
        
        tabRB.setEnabled(false);
        otherRB.setEnabled(false);
        otherTF.setEnabled(false);
        
        
        dataTypeCB.setEnabled(true);
        
        bigEndianRB.setEnabled(true);
        littleEndianRB.setEnabled(true);
        endianLabel.setEnabled(true);
    }
    
    private void serverRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        ipTF.setEnabled(false);
        ipLabel.setEnabled(false);
    }
    
    private void clientRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        ipTF.setEnabled(true);
        ipLabel.setEnabled(true);
    }
    
    private void udpRBActionPerformed(java.awt.event.ActionEvent evt) {
        clientRB.setEnabled(true);
        clientRB.setSelected(true);
        serverRB.setEnabled(false);
        ipTF.setEnabled(true);
        ipLabel.setEnabled(true);
    }
    
    private void tcpRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        serverRB.setEnabled(true);
        ipTF.setEnabled(true);
        ipLabel.setEnabled(true);
        if(serverRB.isSelected()){
            ipTF.setEnabled(false);
            ipLabel.setEnabled(false);
        }
    }
    
    private void socketRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        tcpRB.setEnabled(true);
        udpRB.setEnabled(true);
        serverRB.setEnabled(true);
        clientRB.setEnabled(true);
        portNumTF.setEnabled(true);
        fileTF.setEnabled(false);
        browButton.setEnabled(false);
        syncRB.setEnabled(false);
        unsyncRB.setEnabled(false);
        // inputMethod = 1;
        
        unlimitedRB.setEnabled(false);
        limitedRB.setEnabled(false);
        limitedTF.setEnabled(false);
        
    }
    
    private void fileRBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        tcpRB.setEnabled(false);
        udpRB.setEnabled(false);
        serverRB.setEnabled(false);
        clientRB.setEnabled(false);
        portNumTF.setEnabled(false);
        fileTF.setEnabled(true);
        browButton.setEnabled(true);
        
        syncRB.setEnabled(true);
        unsyncRB.setEnabled(true);
        
        unlimitedRB.setEnabled(true);
        limitedRB.setEnabled(true);
        
        if(limitedRB.isSelected()){
            limitedTF.setEnabled(true);
        }
        
    }
    
    private void saveCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        updateButtonActionPerformed(null);
        this.setVisible(false);
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        updateValue();
         this.setVisible(false);
    }
    
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        
        
        if(syncRB.isSelected()){
            fileSyncBool = true;
        } else{
            fileSyncBool = false;
        }
        
        
        if(fileRB.isSelected()){
            inputMethod = 0;
        } else{
            inputMethod = 1;
        }
        
        if(tcpRB.isSelected()){
            protocolMethod = 0;
        } else{
            protocolMethod = 1;
        }
        
        if(serverRB.isSelected()){
            socketMethod = 0;
        } else{
            socketMethod = 1;
        }
        
        if(binaryRB.isSelected()){
            formatMethod = 0;
        } else{
            formatMethod = 1;
        }
        
        if(littleEndianRB.isSelected()){
            endianMethod = 0;
        } else{
            endianMethod = 1;
        }
        
        dataType = dataTypeCB.getSelectedItem().toString();
        
        filename = fileTF.getText();
        portNum = Integer.parseInt(portNumTF.getText());
        ipAddress = ipTF.getText();
        otherValue = otherTF.getText();
        
        commaCheckBool = commaRB.isSelected();
        spaceCheckBool = spaceRB.isSelected();
        semiCheckBool = semiRB.isSelected();
        tabCheckBool = tabRB.isSelected();
        otherCheckBool = otherRB.isSelected();
        
        if(limitedRB.isSelected()){
            limitedFileBool = true;
        } else{
            limitedFileBool = false;
        }
        
        
        fileSize = Integer.parseInt(limitedTF.getText());
        
        updateValue();
        component.otherValue = otherValue;
        component.inputMethod=inputMethod;
        component.protocolMethod = protocolMethod;
        component.socketMethod = socketMethod;
        component.formatMethod = formatMethod;
        component.endianMethod = endianMethod;
        component.dataType = dataType;
        component.bufferType = bufferType;
        component.bufferSize =bufferSize;
        component.filename = filename;
        component.portNum = portNum;
        component.setFileSize(fileSize);
        component.setSemiCheck(semiCheckBool);
        component.setSpaceCheck(spaceCheckBool);
        component.setCommaCheck(commaCheckBool);
        component.setTabCheck(tabCheckBool);
        component.setOtherCheck(otherCheckBool);
        component.ipAddress = ipAddress;
        
        component.nCol = nCol;
        component.setFileSize(fileSize);
        component.setLimitedFileBool(limitedFileBool);
    }
    
    private void dataTypeCBActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OutputGui().setVisible(true);
            }
        });
    }
    //0 is file, 1 is socket
    private int inputMethod=0;
    
    // 0 is TCP, 1 is UDP
    private int protocolMethod=0;
    
    //0 is server, 1 is client
    private int socketMethod=0;
    
    // 0 is binary, 1 is text
    private int formatMethod=0;
    
    // 0 is little, 1 is big
    private int endianMethod=0;
    
    private String dataType="Float";
    private String bufferType="Vector";
    private int bufferSize=2048;
    
    private String filename="";
    
    private int portNum = 2020;
    
    private String ipAddress="127.0.0.1";
    private String otherValue ="";
    private int nCol = 0;
    
    
    private boolean commaCheckBool = false;
    private boolean spaceCheckBool = false;
    private boolean semiCheckBool = false;
    private boolean tabCheckBool = false;
    private boolean otherCheckBool = false;
    
    private boolean fileSyncBool = true;
    private boolean limitedFileBool = false;
    
    
    // Setter
    public void setOtherCheck(boolean _b){
        otherCheckBool = _b;
    }
    public void setFileSize(int _b){
        fileSize = _b;
    }
    
    public void setLimitedFileBool(boolean _b){
        limitedFileBool = _b;
    }
    
    public void setFileSyncBool(boolean _b){
        fileSyncBool = _b;
    }
    
    public void setCommaCheck(boolean _b){
        commaCheckBool = _b;
    }
    public void setSpaceCheck(boolean _b){
        spaceCheckBool = _b;
    }
    public void setSemiCheck(boolean _b){
        semiCheckBool = _b;
    }
    public void setTabCheck(boolean _b){
        tabCheckBool = _b;
    }
    
    public void setIP(String _s){
        ipAddress = _s;
    }
    public void setOtheValue(String _s){
        otherValue = _s;
    }
    
    public void setNCol(int _i){
        nCol = _i;
    }
    
    
    
    public void setInputMethod(int _i){
        inputMethod = _i;
    }
    
    public void setProtocolMethod(int _i){
        protocolMethod = _i;
    }
    public void setSocketMethod(int _i){
        socketMethod = _i;
    }
    public void setFormatMethod(int _i){
        formatMethod = _i;
    }
    public void setEndianMethod(int _i){
        endianMethod = _i;
    }
    public void setDataType(String _i){
        dataType = _i;
    }
    public void setBufferType(String _i){
        bufferType = _i;
    }
    public void setBufferSize(int _i){
        bufferSize = _i;
    }
    
    public void setFilename(String _i){
        filename = _i;
    }
    
    public void setPort(int _i){
        portNum = _i;
    }
    
    
    
    // Getter
    public boolean getOtherCheck(){
        return otherCheckBool;
    }
    public int getFileSize(){
        return fileSize;
    }
    public boolean getLimitedFileBool(){
        return limitedFileBool;
    }
    
    private boolean getFileSyncBool(){
        return fileSyncBool;
    }
    
    public boolean getCommaCheck(){
        return commaCheckBool;
    }
    public boolean getSpaceCheck( ){
        return spaceCheckBool;
    }
    public boolean getSemiCheck(){
        return semiCheckBool;
    }
    public boolean getTabCheck(){
        return tabCheckBool;
    }
    
    public String getIP(){
        return ipAddress;
    }
    public String getOtheValue(){
        return otherValue;
    }
    
    public int getNCol(){
        return nCol;
    }
    
    
    public int getInputMethod(){
        return inputMethod;
    }
    public int getProtocolMethod(){
        return protocolMethod;
    }
    public int getSocketMethod(){
        return socketMethod;
    }
    public int getFormatMethod(){
        return formatMethod;
    }
    public int getEndianMethod(){
        return endianMethod;
    }
    public String getDataType(){
        return dataType;
    }
    public String getBufferType(){
        return bufferType;
    }
    
    public long getBufferSize(){
        return bufferSize;
    }
    
    public String getFilename(){
        return filename;
    }
    public int getPort(){
        return portNum;
    }
    
    //////////////
    
    public void updateValue(){
        
        String name ="";
        
        if(dataType.equalsIgnoreCase("Byte")){
            name = "Byte";
            DATA_TYPE = DataType.BYTE_VECTOR;
            
        } else if(dataType.equalsIgnoreCase("Short")){
            name = "Short";
            DATA_TYPE = DataType.SHORT_VECTOR;
        } else if(dataType.equalsIgnoreCase("Int")){
            name = "Int";
            DATA_TYPE = DataType.INT_VECTOR;
        } else if(dataType.equalsIgnoreCase("Long")){
            name = "Long";
            DATA_TYPE = DataType.LONG_VECTOR;
        } else if(dataType.equalsIgnoreCase("Float")){
            name = "Float";
            DATA_TYPE = DataType.FLOAT_VECTOR;
        } else if(dataType.equalsIgnoreCase("Double")){
            name = "Double";
            DATA_TYPE = DataType.DOUBLE_VECTOR;
        } else if(dataType.equalsIgnoreCase("Object")){
            name = "Object";
            DATA_TYPE = DataType.OBJECT_VECTOR;
        }
        dataTypeCB.setSelectedItem(name);
        
        if(bufferType.equalsIgnoreCase("Scalar")){
            name = "Scalar";
        } else if(bufferType.equalsIgnoreCase("Vector")){
            name = "Vector";
        } else if(bufferType.equalsIgnoreCase("Matrix")){
            name = "Matrix";
        } else if(bufferType.equalsIgnoreCase("Object")){
            name = "Object";
        }
        
        if(inputMethod==0){
            fileRB.setSelected(true);
            tcpRB.setEnabled(false);
            udpRB.setEnabled(false);
            serverRB.setEnabled(false);
            clientRB.setEnabled(false);
            portNumTF.setEnabled(false);
            browButton.setEnabled(true);
        } else{
            socketRB.setSelected(true);
            tcpRB.setEnabled(true);
            udpRB.setEnabled(true);
            serverRB.setEnabled(true);
            
            clientRB.setEnabled(true);
            
            portNumTF.setEnabled(true);
            fileTF.setEnabled(false);
            browButton.setEnabled(false);
        }
        
        syncRB.setSelected(fileSyncBool);
        
        
        
        if(formatMethod==0){
            binaryRB.setSelected(true);
        } else{
            textRB.setSelected(true);
        }
        
        if(endianMethod==0){
            littleEndianRB.setSelected(true);
        } else{
            bigEndianRB.setSelected(true);
        }
        
        portNumTF.setText(Integer.toString(portNum));
        
        //VT comeback
        //component.getInput().get(0).updateDataType(new DataTypeList(DATA_TYPE));
        
        
        
        if(protocolMethod==0){
            tcpRB.setSelected(true);
        } else{
            socketMethod = 1;
            clientRB.setEnabled(true);
            udpRB.setSelected(true);
            serverRB.setEnabled(false);
        }
        
        if(socketMethod==0){
            serverRB.setSelected(true);
        } else{
            clientRB.setSelected(true);
        }
        
        ///////////////////////
        commaRB.setSelected(commaCheckBool);
        spaceRB.setSelected(spaceCheckBool);
        
        semiRB.setSelected(semiCheckBool);
        
        tabRB.setSelected(tabCheckBool);
        otherRB.setSelected(otherCheckBool);
        otherTF.setText(otherValue);
        
        limitedRB.setSelected(limitedFileBool);
        
        //////////////////////
        
        limitedTF.setText(Integer.toString(fileSize));
        fileTF.setText(filename);
        
    }
    private ButtonGroup inputButtonGroup;
    private ButtonGroup delimiterButtonGroup;
    private ButtonGroup protocolButtonGroup;
    private ButtonGroup serverClientButtonGroup;
    private ButtonGroup formatButtonGroup;
    private ButtonGroup endianButtonGroup;
    private ButtonGroup fileSyncButtonGroup;
    private ButtonGroup fileLimitedSizeGroup;
    
    // Variables declaration - do not modify
    private javax.swing.JRadioButton bigEndianRB;
    private javax.swing.JRadioButton binaryRB;
    private javax.swing.JButton browButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton clientRB;
    private javax.swing.JRadioButton commaRB;
    private javax.swing.JComboBox dataTypeCB;
    private javax.swing.JLabel dataTypeLabel;
    private javax.swing.JLabel delmiterLabel;
    private javax.swing.JLabel endianLabel;
    private javax.swing.JRadioButton fileRB;
    private javax.swing.JTextField fileTF;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JTextField ipTF;
    private javax.swing.JRadioButton limitedRB;
    private javax.swing.JTextField limitedTF;
    private javax.swing.JRadioButton littleEndianRB;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton otherRB;
    private javax.swing.JTextField otherTF;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portNumTF;
    private javax.swing.JLabel protocolLabel;
    private javax.swing.JButton saveCloseButton;
    private javax.swing.JRadioButton semiRB;
    private javax.swing.JRadioButton serverRB;
    private javax.swing.JRadioButton socketRB;
    private javax.swing.JRadioButton spaceRB;
    private javax.swing.JRadioButton syncRB;
    private javax.swing.JRadioButton tabRB;
    private javax.swing.JRadioButton tcpRB;
    private javax.swing.JRadioButton textRB;
    private javax.swing.JRadioButton udpRB;
    private javax.swing.JRadioButton unlimitedRB;
    private javax.swing.JRadioButton unsyncRB;
    private javax.swing.JButton updateButton;
    // End of variables declaration
    
}
